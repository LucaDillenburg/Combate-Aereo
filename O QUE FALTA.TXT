- opcao para mudar tamanho personagem e inimigo. OK
- fazer esquema para criar timers todo level e coloca-los em um vetor, entao quando for passar de level deletar esses timers. OK

- arrumar setTipoAndar para SeguirInimMaisProx (nao ve soh o primeiro controladorInimigos). OK
- arrumar Lista.inserirNoFinal(...). OK
- arrumar: tiros tela nao estao se movimentando. OK
- soh tirar inimigos e obstaculos da lista depois que eles forem mostrados mortos. OK
- colocar o index dos controladoresObjetos como atributo do controladorObjetos. OK
- tirar variaveis publicas (soh tinha atehQualXYPodeAndar). OK
- tirar static gets que definem qual ObjetoTela que eh e criar um const enum que define isso (trocar todos os usos desses static gets e quando passar o ObjetoTela nao precisa passa o tipo pois pode-se usar metodo do TipoObjetos para conseguir o tipo dele). OK
- ver se objeto tela tem ou nao vida pelo atributo vida. OK
- mudar em todos os arquivos (por causa de novos conhecimentos):
  .colocar CONST ao inves de LET onde nao for mudar a variavel (nao soh quando nao faz atribuicao). OK
  .colocar valores padroes nos parametros ao inves de ver se eh null e depois atribuir. OK
  .quando for pra deletar a variavel da memoria usar ao inves de "= null;". OK
  .undefined eh diferente de null => mudar isso. OK
  .pesquisar se fazer "===" ao inves de "==" eh boa pratica. OK
  .mudar null por undefined quando precisar (em parametros principalmente). OK
  .ver se tem outra maneira de fazer para diferenciar nulo de undefined e tirar class Nulo. OK
- poder -> pocao (poder, poderes, Poderes, Poder, POCAO). OK
- pensar se isso funcionaria suav: OK
  .inimigos essenciais nao precisam ser apenas os do primeiro controlador (o controladorInimigos eh essencial entao todos os inimigos que vem dele tambem serao). pesquisar "== 0", "==0", "essencial", mudar o "ganhar" do ControladorJogo e deixa-lo como default e criar um case 2 que retorna false
  .obstaculos sem vida podem morrer por tiro se for poder 1TiroMata

- POCAO: FALTA DEIXAR TEMPO MAIS DEVAGAR (metodo para todos os objetos e controladores: fazer porcentagem*qtdAndar e (1/porcentagem)*auxAtirar e com frequencia)
  -> andar dos inimigos
  -> andar dos obstaculos
  -> andar dos tiros (dos inimigos e da tela)
  -> atirar do inimigo
  -> criar tiros da tela
  -> Timers (os que jah existem e os que vao ser criados)
ps: deixar mais rapido de novo depois que acabar o tempo da pocao

- colocar opcao para mudar o qtdAndar depois de cada andada (variavel porcentagem que vai fazer objeto acelerar ou desacelerar /*isto eh, mudar o qtdAndar*/ cada vez que ele anda)
- Fazer classe: FuncaoEm camadas/niveis. andouCamada(), regrediuCamada() -> retorna se deve fazer a funcao (dar nome para classe de acordo com aquela palavra do livro de Daniel: olhar biblia)

- tiros e obstaculos aparentemente nao estao sumindo logo que morrem (estah ficando mais doq um draw, ver se estah tirando depois do draw)
- ver comentarios //TODO

- CreateCanvas de um tamanho m√≠nimo: metade de toda tela + quando o canvas perde o foco, pausa-lo
- CRIAR NIVEIS

- mudar class ListaLigada para classe do proprio Javascript?? Tem todos os metodos mas aparentemente eh mais lento quando fica-se adicionando e removendo coisas (principalmente removendo)... ver se vale a pena
- otimizar codigo
- e colisao de inimigo com inimigo e obstaculo ??
- opcao para mudar tamanho obstaculo??

Geometria:
- programar centroMassa de quadrilatero (media de todos os vertices)
- pensar um pouco na colisao de obstaculos (para onde eles vao quando colidem)
- fazer Interseccao.qntPodeAndarAntesIntersec(...) para Triangulo
- considerar um quadradao (de onde estava pra onde foi) antes de verificar a colisao certinha fazendo paralelogramos e etc
- fazer opcao para rotacionar FormasGeometricas (quando personagem fica maluco; obstaculos e inimigos: quanto rotacionar no infoAndar)
- ORGANIZAR EXPLICACOES: COLOCAR NO GIT EXPLICACOES DO PAPEL (DEIXAR BONITINHA) + MUDAR NOME DOS ARQUIVOS DO PAINT E DEIXAR MAIS BONITINHO TAMBEM
- fazer Interseccao.vaiTerInterseccao(...) para Paralelogramos e Quadrilateros
- fazer FormaGeometrica para circulo com interseccao e procedimento em Interseccao.
- podemos saber se um ponto estah dentro de um quadrilatero (ou soh paralelogramo?) se estiver entre as retas de cima e de baixo e da direita e da esquerda (qual maneira eh mair rapida??)

Outros:
- variaveis que sao guardadas separadamente e depois tem que juntar, guardar junto (ex: infoAndar). ps: fazer classe para infoAndar por exemplo
- arrumar andar do personagem (quando jah tem duas teclas pressionadas quando uma terceira eh pressionada, o evento nao eh fired)
- colocar som
- quando objetos com vida perderem vida abaixar a vida gradativamente (mudarVida gradativamente)
- quando um tiro colidir com obstaculos e inimigos guardar todos eles, e soh tirar da lista quando todos os inimigos e
obstaculos andarem (mudar emQuemBateu, procCriou, _estadoTiroPosAndarEhPers)
