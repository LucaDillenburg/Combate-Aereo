- AGORA: COMITAR E DEPOIS VER ANDAR DO PERSONAGEM (VER PROGRESSO.TXT)
- SISTEMA DE TESTE
   > testar se PontoCerto do paralelogramo estah realmente certo
   > testar se estah se criando os paralelogramos certos
   > fazer sistema de Teste do jogo (colocar super devagar: framerate baixissimo)

- fazer Interseccao.qntPodeAndarAntesIntersec(...) para Triangulo

- colisao com obstaculos: se bate em cima ou em baixo soh anda em Y, o contrario soh anda em X

- opcao para mudar tamanho personagem, inimigo e obstaculo
(deve ser super parecido com procCriou, talvez possa usar ele mesmo ou fazer um metodo em comum)

- New Features:
  .Poder (img, cod, nome, executarPoder)
  .ControladorPoderes

- ver comentarios //TODO

- CreateCanvas de um tamanho mínimo: metade de toda tela (resize() mudar o tamanho dele?)

- quando objetos com vida perderem vida abaixar a vida gradativamente (mudarVida gradativamente)

- fazer Interseccao.vaiTerInterseccao(...) para Paralelogramos e Quadrilateros
- quando um tiro colidir com obstaculos e inimigos guardar todos eles, e soh tirar da lista quando todos os inimigos e
obstaculos andarem (mudar emQuemBateu, procCriou, _estadoTiroPosAndarEhPers)

------------------------------------------------------------------------------------------------------------------------------

 EXPLICACAO: em cada level terá vários
    .GRUPOS DE OBSTACULOS: todos obstáculos do grupo
    (vetor de ControladorObstaculos no ControladorJogo)
      -> será com ou sem vida
      -> vão ficar parados, andar sempre com o msm qtdAndarX e qtdAndarY, inverter qtdAndarX e qtdAndarY para nao sair da tela ou
        andam em direcao ao pers
    .GRUPOS DE INIMIGOS: todos os inimigos do grupo
    (vetor de ControladorInimigos no ControladorJogo)
      -> vão ser essenciais ou não (os essenciais são aqueles que quando forem mortos o level acabará)
      -> vão mostrar a vida sempre ou só quando forem atingidos
      -> vão andar sempre com o msm qtdAndarX e qtdAndarY, inverter o qtdAndarX e qtdAndarY ao nao deixar sair da vidaNaTela [ou de outra forma]
    .GRUPOS DE TIROS: todos os tiros do grupo
    (vetor de ControladorTiros no ControladorJogo e nos Inimigos e Personagem)
      -> serão do personagem ou nao
      -> podem andar sempre a mesma coisa ou seguir o personagem
    .GRUPO DE PODERES (ver IDEIAS.txt)
    (classe Poder: metodo para colocar o poder na pratica, img,... e ControladorPoder: vai criar um poder "aleatorio" pra por na tela)
      -> O poder vai ficar guardado ou vai ser usado logo que o usuario o pegar??
      -> O poder vai ser pra smp ou temporario??
  ps: Tudo, exceto o personagem, mudará a cada level


 EXPLICAÇÃO COLISÃO DE OBJETOS:
    . tiros (se de pers: com obstáculos e inimigos, se não: com personagem). OK
    . personagem (com tiros dos inimigos e normal, com inimigos e com obstáculos)
      -> colidir com esses objetos normal (perPrinc.mudarXY(), mudar andar personagem no Script.js e ControladorJogo de acordo
        com mudanca no PersonagemPrincipal, ControladorTiros.procedimentoPersComVidaAndar(),
        adicionar em Inimigo: propriedade qtdTiraVidaPersQndIntersec (getter, construtor, mudar criar inimigo em ControladorJogo)
        e metodo tirarVidaPersIntersec(pers)). OK
      -> verificar isso no mudarWidth e mudarHeight para maior (quando for intersectar obstaculo, tirar vida de personagem e
        "explodir" obstaculo; quando for inimigo tirar vida e fazer setTimeout; e quando for tiro bater e faze-los morrer)
      -> com inimigos: timer que toda vez vê se ele ainda não se mexeu e está dentro do inimigo
    . inimigos (com personagens, tiros do pers)
      -> colisao normal
      -> verificar isso no mudarWidth e mudarHeight tbm para maior (colidir tiro do pers e se intersec tirar vida de pers e fazer setTimeout)
      -> com personagens: timer que toda vez vê se ele ainda não se mexeu e está dentro do inimigo
    . obstáculos (com personagens e tiros do pers)
      -> colisao normal (com tiro do pers faz tiro morrer e com pers faz ele andar: se nao da pra ele andar tudo,
        ele leva um dano [proporcional?] e obstaculo "explode")
      -> verificar isso no mudarWidth e mudarHeight tbm para maior (se for colidir com personagem, mudar (x,y) dele, se isso nao for
        possivel tirar vida e "explodir" obstaculo)
