- REESTRUTURAÇÃO: InfoObjetoTela + ConjuntoObjetosTela + Timer + FreqFunction
   -> InfoObjetoTela: todos os controladores guardam InfoObjetoTela. (OK). Beneficios:
      1. nao precisam ter um ObjetoTela em si
      2. parametros ficam bem mais organizados (soh passa o InfoObj como parametro e (x,y))
      3. quando o tipoAndar de InfoAndar eh TipoAndar.Direcao... ele simplesmente guarda isso e nao transforma nos qtdAndarX e Y corretos para aquele inimigo e TipoAndar.Normal
      4. com isso eh possivel saber quando eh apenas para guardar e quando realmente eh um Objeto em si

   -> ConjuntoObjetosTela (static class que guarda todos os objetosTel). (OK). Beneficios:
      1. nao precisa ficar passando (conjuntoObjetosTela, pers, controladoresInimigos, controladoresObstaculos, controladoresTirosJogo,...)
      2. nem trocar os parametros se precisar de mais algum ObjetoTela e depois ajustar o resto a isso
      3. todos os ObjetosTela estao acessiveis em qualquer lugar
      ps: adequar o resto a essa classe (tirar parametros e pegar objetosTela dessa classe)

   -> Timer. OK
      1. Para que soh exista um setInterval (todos os timers estao atrelados ao draw)
      2. O timer soh conta quando estah EstadoJogo.Jogando
      ps: + Classe static ArmazenadorTimers (ListaLigada de Timers)

   -> FreqFunction. OK
      1. Para nao ficar repetindo o mesmo estilo de codigo e simplificar e abstrair
      2. codigo mais limpo

- implementar PosicaoX e Y em construtor de ObjetosTela e todos que extends ele (pontoInicial.posicaoX ou pontoInicial.x, pontoInicial.posicaoY ou pontoInicial.y). OK
- quando personagem morre tirar todos os Timers da lista. OK

- New Features:
  .class Poder (img, cod, nome, executarPoder())
  .class ObjTelaPoder
  .class ControladorPoderes (??) -> get temPoderTela, colocarPoderRandomico(), colocarPoderEspecifico(cod)

- opcao para mudar tamanho personagem, inimigo e obstaculo (deve ser super parecido com procCriou, talvez possa usar ele mesmo ou fazer um metodo em comum- o que eh diferente eh se quando ele aumentar, ele for ficar com parte do corpo para fora, dessa maneira ele aumenta de tamanho e depois anda)

- mudar class ListaLigada para classe do proprio Javascript (eh possivel remover e adicionar atual??)? (ou passar para Outros.cs)
- pensar um pouco na colisao de obstaculos (para onde eles vao quando colidem)
- fazer Interseccao.qntPodeAndarAntesIntersec(...) para Triangulo
- considerar um quadradao (de onde estava pra onde foi) antes de verificar a colisao certinha fazendo paralelogramos e etc

- testar colocar valores padroes nos parametros ao inves de ver se eh null e depois atribuir

- tiros e obstaculos aparentemente nao estao sumindo logo que morrem (estah ficando mais doq um draw, ver se estah tirando depois do draw)
- colocar opcao para mudar o qtdAndar mudar depois de cada andada (variavel porcentagem que vai fazer objeto acelerar ou desacelerar /*isto eh, mudar o qtdAndar*/ cada vez que ele anda)
- variaveis que sao guardadas separadamente e depois tem que juntar, guardar junto (ex: infoAndar). ps: fazer classe para infoAndar por exemplo
- variavel = null, mudar para delete variavel (apagar da memoria quando for interessante)

- e colisao de inimigo com inimigo e obstaculo ??

- ver comentarios //TODO

- fazer opcao para rotacionar FormasGeometricas (quando personagem fica maluco; obstaculos e inimigos: quanto rotacionar no infoAndar)
- CreateCanvas de um tamanho mínimo: metade de toda tela + quando o canvas perde o foco, pausa-lo
- CRIAR NIVEIS

- ORGANIZAR EXPLICACOES: COLOCAR NO GIT EXPLICACOES DO PAPEL (DEIXAR BONITINHA) + MUDAR NOME DOS ARQUIVOS DO PAINT E DEIXAR MAIS BONITINHO TAMBEM

- Sobre LISTA LIGADA: quando mais de um metodo usar a lista ao mesmo tempo ou quando um metodo esta percorrendo a lista e chama outro que tambem vai percorrer a lista o atual vai ficar maluco. PORTANTO, VERIFIQUE QUE NAO EH ISSO QUE ESTAH OCORRENDO
- fazer Interseccao.vaiTerInterseccao(...) para Paralelogramos e Quadrilateros
- fazer FormaGeometrica para circulo com interseccao e procedimento em Interseccao.
- podemos saber se um ponto estah dentro de um quadrilatero (ou soh paralelogramo?) se estiver entre as retas de cima e de baixo e da direita e da esquerda (qual maneira eh mair rapida??)
- programar centroMassa de quadrilatero (media de todos os vertices)

- arrumar andar do personagem (quando jah tem duas teclas pressionadas quando uma terceira eh pressionada, o evento nao eh fired)
- colocar som
- quando objetos com vida perderem vida abaixar a vida gradativamente (mudarVida gradativamente)
- quando um tiro colidir com obstaculos e inimigos guardar todos eles, e soh tirar da lista quando todos os inimigos e
obstaculos andarem (mudar emQuemBateu, procCriou, _estadoTiroPosAndarEhPers)

------------------------------------------------------------------------------------------------------------------------------

 EXPLICACAO: em cada level terá vários
    .GRUPOS DE OBSTACULOS: todos obstáculos do grupo
    (vetor de ControladorObstaculos no ControladorJogo)
      -> será com ou sem vida
      -> vão ficar parados, andar sempre com o msm qtdAndarX e qtdAndarY, inverter qtdAndarX e qtdAndarY para nao sair da tela ou
        andam em direcao ao pers
    .GRUPOS DE INIMIGOS: todos os inimigos do grupo
    (vetor de ControladorInimigos no ControladorJogo)
      -> vão ser essenciais ou não (os essenciais são aqueles que quando forem mortos o level acabará)
      -> vão mostrar a vida sempre ou só quando forem atingidos
      -> vão andar sempre com o msm qtdAndarX e qtdAndarY, inverter o qtdAndarX e qtdAndarY ao nao deixar sair da vidaNaTela [ou de outra forma]
    .GRUPOS DE TIROS: todos os tiros do grupo
    (vetor de ControladorTiros no ControladorJogo e nos Inimigos e Personagem)
      -> serão do personagem ou nao
      -> podem andar sempre a mesma coisa ou seguir o personagem
    .GRUPO DE PODERES (ver IDEIAS.txt)
    (classe Poder: metodo para colocar o poder na pratica, img,... e ControladorPoder: vai criar um poder "aleatorio" pra por na tela)
      -> O poder vai ficar guardado ou vai ser usado logo que o usuario o pegar??
      -> O poder vai ser pra smp ou temporario??
  ps: Tudo, exceto o personagem, mudará a cada level


 EXPLICAÇÃO COLISÃO DE OBJETOS:
    . tiros (se de pers: com obstáculos e inimigos, se não: com personagem). OK
    . personagem (com tiros dos inimigos e normal, com inimigos e com obstáculos)
      -> colidir com esses objetos normal (perPrinc.mudarXY(), mudar andar personagem no Script.js e ControladorJogo de acordo
        com mudanca no PersonagemPrincipal, ControladorTiros.procedimentoPersComVidaAndar(),
        adicionar em Inimigo: propriedade qtdTiraVidaPersQndIntersec (getter, construtor, mudar criar inimigo em ControladorJogo)
        e metodo tirarVidaPersIntersec(pers)). OK
      -> verificar isso no mudarWidth e mudarHeight para maior (quando for intersectar obstaculo, tirar vida de personagem e
        "explodir" obstaculo; quando for inimigo tirar vida e fazer setTimeout; e quando for tiro bater e faze-los morrer)
      -> com inimigos: timer que toda vez vê se ele ainda não se mexeu e está dentro do inimigo
    . inimigos (com personagens, tiros do pers)
      -> colisao normal
      -> verificar isso no mudarWidth e mudarHeight tbm para maior (colidir tiro do pers e se intersec tirar vida de pers e fazer setTimeout)
      -> com personagens: timer que toda vez vê se ele ainda não se mexeu e está dentro do inimigo
    . obstáculos (com personagens e tiros do pers)
      -> colisao normal (com tiro do pers faz tiro morrer e com pers faz ele andar: se nao da pra ele andar tudo,
        ele leva um dano [proporcional?] e obstaculo "explode")
      -> verificar isso no mudarWidth e mudarHeight tbm para maior (se for colidir com personagem, mudar (x,y) dele, se isso nao for
        possivel tirar vida e "explodir" obstaculo)
